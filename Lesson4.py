#Ex. 1
#Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
hours, base_salary, bonus = argv
print(hours * base_salary + bonus)

#Ex. 2
#Представлен список чисел. Необходимо вывести элементы исходного списка, з
# начения которых больше предыдущего элемента.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(my_list)

new_list = []

for i in range(1, len(my_list)-1):
    if my_list[i] > my_list[i -1]:
        new_list.append(my_list[i])

print(new_list)

#Ex. 3
#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.

print([el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0])

#Ex. 4
# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) == 1]
print(new_list)

#Ex. 5
#Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.

from functools import reduce

def my_func(x, y):
    return x * y

my_list = [el for el in range(99, 1001) if el % 2 == 0]

print(reduce(my_func,my_list))

#Ex. 6
#a) итератор, генерирующий целые числа, начиная с указанного

from itertools import count

for el in count(10, 1):
    if el > 50 :
        break
    else :
        print(el)

#b) итератор, повторяющий элементы некоторого списка, определенного заранее

from itertools import cycle

i = 0
for el in cycle( "мяу" ):
    if i > 10 :
        break
    else:
        print(el)
        i += 1

#Ex. 7
#Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
# начиная с 1! и до n!.

from math import factorial

n = int(input('Введите число:'))

generator = (factorial(el) for el in range(1, n + 1))

for i in generator:
    print(i)
